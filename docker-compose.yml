version: '3'
services:

  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    #image: digitalocean.com/flask-python:3.6
    restart: unless-stopped
    environment:
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      FLASK_PORT: ${FLASK_PORT}
      MONGODB_DB: ${MONGODB_DB}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PWD: ${MONGODB_PWD}
      MONGODB_URI_PREFIX: ${MONGODB_URI_PREFIX}
      MONGODB_URI_SUFFIX: ${MONGODB_URI_SUFFIX}
      MONGODB_URI_EXTRA_PYTHON_SUFFIX: ${MONGODB_URI_EXTRA_PYTHON_SUFFIX}
      #MONGODB_HOSTNAME: mongodb
    volumes:
      - flaskdata:${FLASK_DATA_DIR}
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend
      
  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    #command: curl "mongodb+srv://" + 
    # 				${MONGODB_USER} + ":" + 
    #				${MONGODB_PWD} + "@" + 
    #				${MONGODB_DB} + 
    #				"-lhzto.mongodb.net/test?retryWrites=true&w=majority"
    #command: mongod --auth
    #command: mongo ${MONGODB_URI}
    #command: mongo ${MONGODB_URI} --username ${MONGODB_USER} --password ${MONGODB_PWD}
    command: mongo "${MONGODB_URI_PREFIX}${MONGODB_DB}${MONGODB_URI_SUFFIX}" --username ${MONGODB_USER} --password ${MONGODB_PWD}
    #environment:
      #MONGO_INITDB_ROOT_USERNAME:
      #MONGO_INITDB_ROOT_PASSWORD: 
      #MONGO_INITDB_DATABASE: 
      #MONGODB_DATA_DIR: ${MONGODB_DATA_DIR}
      #MONGODB_LOG_DIR: ${MONGODB_LOG_DIR}
    volumes:
      - mongodbdata:${MONGODB_DATA_DIR}
      - mongodblog:${MONGODB_LOG_DIR}
    networks:
      - backend
      
  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    #image: digitalocean.com/webserver:latest
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "false"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxlog:${NGINX_LOG_DIR}
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge


volumes:
  flaskdata:
    driver: local
    driver_opts:
      type: none #if "bind", then bind mount
      device: $PWD/${FLASK_HOST_DATA_DIR} # must be an ABSOLUTE PATH
      o: bind

  mongodbdata:
    driver: local
    driver_opts:
      type: none
      device: $PWD/${MONGODB_HOST_DATA_DIR} # must be an ABSOLUTE PATH
      o: bind

  mongodblog:
    driver: local
    driver_opts:
      type: none
      device: $PWD/${MONGODB_HOST_LOG_DIR} # must be an ABSOLUTE PATH
      o: bind

  nginxlog:
    driver: local
    driver_opts:
      type: none
      device: $PWD/${NGINX_HOST_LOG_DIR} # must be an ABSOLUTE PATH
      o: bind

#volumes:
#  mongodbdata:
#    driver: local
#  appdata:
#    driver: local
#  nginxdata:
#    driver: local
